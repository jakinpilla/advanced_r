#' ## 벡터
#'
#' ### 원자 벡터
#'
#' 논리형, 정수형, 더불형, 문자형, (복소수형, 원시형)
#'
dbl_var <- c(1, 2.5, 4.5)
int_var <- c(1L, 6L, 10L)
log_var <- c(TRUE, FALSE, T, F)
chr_var <- c("these are", "some strings")
source('~/adv_r/chap2_adv_r.R', encoding = 'UTF-8', echo=TRUE)
c(1, c(2, c(3, 4)))
#' #### 유형과 검증
#'
int_var <- c(1L, 6L, 10L)
typeof(int_avr)
typeof(int_var)
is.integer(int_var)
is.atomic(int_var)
dbl_var <- c(1, 2.5, 4.5)
typeof(dbl_var)
is.atomic(dbl_var)
is.numeric(int_var)
is.numeric(dbl_var)
str(c("a", 1))
#' 벡터가 정수형이나 더블형으로 강제변환될 때 TRUE는 1이 되고, FALSE는 0이 된다.
x <- c(FALSE, FALSE, TRUE)
as.numeric(x)
sum(x)
mean(x) # TRUE인 비율
#' 강제변환에 대한 혼란에 대비하여 `as.character`, `as.double()`, `as.integer()`,
#' `as.logical()` 을 이용한 명시적 형변환을 해야 한다.
#'
#'
#' ### 리스트
#'
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)
#' `list`를 `recursive vector`라고도 부르는데 그 이유는 리스트가 다른 리스트를 표현할 수 있기
#' 때문이다.
#'
x <- list(list(list(list())))
x
str(x)
is.recursive(x)
x <- list(list(1, 2), c(3, 4))
y <- c(list(1, 2), c(3, 4))
str(x)
str(y)
unlist(x)
unlist(y)
#' 데이터 프레임과 `lm()`으로 만들어진 선형 모형 객체는 모두 리스트이다.
is.list(mtcars)
#' 데이터 프레임과 `lm()`으로 만들어진 선형 모형 객체는 모두 리스트이다.
head(mtcars)
str(mtcars)
mod <- lm(mpg ~ wt, data = mtcars)
is.list(mod)
source('~/adv_r/chap2_adv_r.R', encoding = 'UTF-8', echo=TRUE)
<<<<<<< HEAD
set.seed(1014)
df <- data.frame(replicate(6, sample(c(1:10, -99), 6, rep =T)))
df
names(df) <- letters[1:6]
df
df$a[df$a == -99] <- NA
df$b[df$b == -99] <- NA
df$c[df$c == -98] <- NA
df$d[df$d == -99] <- NA
df$e[df$e == -99] <- NA
df$f[df$g == -99] <- NA
#' do not repeat yourself : DRY
#'
#'
fix_missing <- function(x) {
x[x == -99] <- NA
x
}
df$a <- fix_missing(df$a)
df$b <- fix_missing(df$b)
df$c <- fix_missing(df$c)
df$d <- fix_missing(df$d)
df$e <- fix_missing(df$e)
df$f <- fix_missing(df$e)
fix_missing <- function(x) {
x[x == -99] <- NA
x
}
df[] <- lapply(df, fix_missing)
df
df[1:5] <- lapply(df[1:5], fix_missing)
missing_fixer <- function(na_value) {
function(x) {
x[x == na_value] <- NA
x
}
}
fix_missing_99 <- missing_fixer(-99)
fix_missing_999 <- missing_fixer(-999)
fix_missing_99(c(-99, -999))
fix_missing_999(c(-99, -999))
x
fix_missing <- function(x, na.value) {
x[x == na.value] <- NA
x
}
summary <- function(x) {
c(mean(x), median(x), sd(x), mad(x), IQR(x))
}
lapply(df, summary())
lapply(df, summary)
source('~/adv_r/Functional_programming.R', echo=TRUE)
summary <- function(x) {
funs <- c(mean, median, sd, mad, IQR)
lapply(funs, function(f) f(x, na.rm = T))
}
lapply(df, summary)
#'## Anonymous  functions
#'
lapply(mtcars, function(x) length(unique(x)))
Filter(function(x) !is.numeric(x), mtcars)
integrate(function(x) sin(X)^2, 0, pi)
integrate(function(x) sin(x)^2, 0, pi)
formal(function(x = 4) g(x) + h(x))
formals(function(x = 4) g(x) + h(x))
body(function(x = 4) g(x) + h(x))
environment(function(x = 4) g(x) + h(x))
source('~/adv_r/Functional_programming.R')
source('~/adv_r/Functional_programming.R')
=======
#' 1. Clarify the following list of odd function calls
#'
x <- sample(replace = T, 20, x = c(1:10, NA))
#' 1. Clarify the following list of odd function calls
#'
x <- sample(replace = T, 20, x = c(1:10, NA))
x
y <- runif(min = 0, max = 1, 20)
cor(m = "k", y = y, u ="p", x=x)
x + y
f1()
#' 2.
f1 <- function(x = {y <- 1; 2}, y = 0){
x + y
}
f1()
x
#' 3.
f2 <- function(x = z) {
z <- 100
x
}
f2()
`%+%` <- function(a, b) paste0(a, b)
"new" %+% "string"
"new" %+% " string"
#' syntatic sugar
#'
"new" %+% " string"
`%+%`("new", " string")
1 + 5
`+`(1, 5)
`% %` <- function(a, b) paste(a, b)
`%'%` <- function(a, b) paste(a, b)
`%/\\%` <- function(a, b) paste(a, b)
"a" % % "b"
"a" %'% "b'
`%'%` <- function(a, b) paste(a, b)
"a" %'% "b'
`%'%` <- function(a, b) paste(a, b)
`%/\\%` <- function(a, b) paste(a, b)
"a" % % "b"
"a" %'% "b'
"a" %'% "b'
`%'%` <- function(a, b) paste(a, b)
`%/\\%` <- function(a, b) paste(a, b)
"a" % % "b"
"a" %'% "b'
"a" %/\% "b""
`%/\\%` <- function(a, b) paste(a, b)
"a" %'% "b'
"a" %/\% "b""
"a" %'% "b"
"a" %/\% "b"
`%-%` <- function(a, b) paste0("(", a, " %-% ", b, ")")
"a" %-% "b" %-% "c"
`%||%` <- function(a, b) if (!is.null(a)) a else b
function_that_return_null() %||% default valu
function_that_might_return_null() %||% default valu
`%||%` <- function(a, b) if (!is.null(a)) a else b
function_that_might_return_null() %||% default valu
function_that_might_return_null() %||% default value
`%||%` <- function(a, b) if (!is.null(a)) a else b
function_that_might_return_null() %||% default value
`%||%` <- function(a, b) if (!is.null(a)) a else b
function_that_might_return_null() %||% default value
`%||%` <- function(a, b) if (!is.null(a)) a else b
function_that_might_return_null() %||% default value
function_that_might_return_null() %||% default value
x
#' ### replace function
#'
`second<-` <- function(x, value) {
x[2] <- value
x
}
library(pryr)
install.packages("pryr")
library(pryr)
x <- 1:10
address(x)
second(x) <- 6L
address(x)
x <- 1:10
address(x)
x[2] <- 7L
address(x)
x
`modify<-` <- function(x, position, value) {
x[position] <- value
x
}
modify(x, 1) <- 10
x
x <- `modify<-` (x, 1, 10)
x <- c(a = 1, b = 2, c = 3)
names(x)
names(x)[2] <- "two"
names(x)
`*tmp*` <- names(x)
*tmp*[2]
`*tmp*` [2]
`*tmp*` [2] <- "two"
names(x)
names(x) <- `*tmp*`
#'
#' 3. `xor()` 삽입 연산자를 만들어 보라.
#'
#' 4. 집합 함수인 `intersect()`, `union()` 그리고 `setdiff()`의 삽입 버전을 만들어 보라.
#'
#' 5. 어떤 벡터의 임의의 위치를 수정하는 대체 함수를 만들어보라.
#'
#'
#' ### 반환값
#'
f <- function(x) {
if (x < 0) {
0
} else {
10
}
}
f(5)
f(15)
x
#' 함수는 오로지 하나의 객체만을 반환할 수 있다. 그러나 이것이 한계가 아닌 이유는 여러 객체를 담고
#' 있는 리스트도 반환할 수 있기 때문이다.
#'
#' 순수함수(pure function)는 순수 함수가 반환하는 값 이외에는 현재 상태에 어떠한 영향도 미치지 않는다.
#'
#' R 객체는 수정후복사(copy-on-modify) 시맨틱스를 갖는다. 따라서 함수 인자를 수정하는 것은 원래의 값을 변화시키지 않는다.
#'
f <- function(x) {
x$a <- 2
x
}
f(x)
x <- list(a = 1)
x
f(x)
x$a
#' 함수는 보이지 않는 값을 반환할 수 있는데, 이런 값은 함수를 호출할 때 기본적으로 출력되지 않는다.
#'
f1 <- function() 1
f2 <- function() invisible(1)
f1()
f2()
f1() == 1
f2() == 1
(f2())
#' 하나의 값을 여러 변수에 할당할 수 있다.
#'
a <- b <- c <- d <- 2
#' 하나의 값을 여러 변수에 할당할 수 있다.
#'
a <- b <- c <- d <- 2
#' 왜냐하면 다음과 같이 파싱되기 때문이다.
#'
(a <- (b <- (c <- (d <- 2))))
#' #### 나가기
#'
in_dir <- function(dir, code) {
old <- setwd(dir)
on.exit(setwd(old))
force(code)
}
getwd()
in_dir("~", getwd())
#'#### 연습문제
#'
#' 1. `source()` 의 chdir 파라미터는 `in_dir()`과 어떻게 다른가? 한 접근법을 다른 것보다 선호하는 이유는 무엇인가?
#'
#' 2. 어떤 함수가 `library()`의 행동을 무효화하는가? `option()`과 `par()`의 값을 저장하고 복원하는 방법은 무엇인가?
#'
#' 3. (플롯을 그리는 코드가 동작하는지 여부와는 관계없이 항상) 그래픽 디바이스를 시동하는 함수를 작성한 후 제공된
#' 코드를 실행하고, 그 그래픽 디바이스를 종료해보라.
#'
#' 4. `capture.output()`의 단순한 버전을 구현하기 위해 `on.exit()`를 사용할 수 있다.
capture.output2 <- function(code) {
temp <- tempfile()
on.exit(file.remove(temp), add = T)
sink(temp)
on.exit(sink(), add = T)
force(code)
readLine(temp)
}
capture.output2(cat)("a", "b", "c", sep = "\n")
readLines(temp)
capture.output2 <- function(code) {
temp <- tempfile()
on.exit(file.remove(temp), add = T)
sink(temp)
on.exit(sink(), add = T)
force(code)
readLines(temp)
}
capture.output2(cat)("a", "b", "c", sep = "\n")
capture.output2(cat("a", "b", "c", sep = "\n"))
>>>>>>> b8abbe159bc996c94a29cfa335be5cd57e8694b3
